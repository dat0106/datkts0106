<?xml version="1.0"?>
<!--
  - Author:  Lars Vogel
  -->

<project name="docbook-src" default="build-epub">
	<description>
            This Ant file is used to transform DocBook XML to epub output
    </description>

	<!--
      - Configure basic properties that will be used in the file.
      -->

	<property name="input.dir" value="input" />
	<property name="output.dir" value="output" />
	<property name="docbook.xsl.dir" value="docbook-xsl-1.76.1" />

	<property name="epub.stylesheet" value="mystylesheets/mymobidocbook.xsl" />

	<property name="{destfilename}" value="book" />

	<!-- Making saxon available -->
	<path id="saxon.class.path">
		<pathelement location="lib/saxon.jar" />
	</path>

	<property name="epubcheck.jar" value="lib/epubcheck/epubcheck-1.2.jar" />
	<!--
      - target:  usage
      -->

	<target name="usage" description="Prints the Ant build.xml usage">
		<echo message="Use -projecthelp to get a list of the available targets." />
	</target>

	<!--
      - target:  clean
      -->

	<target name="clean" description="Cleans up generated files.">
		<delete dir="${output.dir}" />
	</target>

	<!--
      - target:  depends
      -->

	<target name="depends">
		<mkdir dir="${output.dir}" />
		<mkdir dir="${output.dir}/tmp" />
		<copy todir="${output.dir}/tmp">
			<fileset dir="epubinput">
				<include name="mimetype" />
			</fileset>
		</copy>
		<copy todir="${output.dir}/tmp/OEBPS/images">
			<fileset dir="images">
				<include name="vogella_current_logo.png" />
			</fileset>
		</copy>
	</target>

	<!--
      - target:  build-html
      - description:  Iterates through a directory and transforms
      -     .xml files into .html files using the DocBook XSL.
      -->

	<!--
	   - target:  build-epub
	   - description:  Iterates through a directory and transforms
	   -     .xml files into .epub files using the DocBook XSL.
	 -->
	<target name="build-epub" depends="clean, depends" description="Generates EPUB files from DocBook XML">

		<xslt style="${epub.stylesheet}" extension=".html" 
			basedir="${input.dir}" destdir="${output.dir}/tmp">
			<include name="**/*book.xml" />
			<param name="epub.stylesheet" expression="style.css" />
			<!-- The following parameter do not work currently
			
			<param name="epub.metainf.dir" expression="${output.dir}/META-INF/" />
			<param name="epub.oebps.dir" expression="${output.dir}/OEBPS/" />
			-->
			<classpath refid="saxon.class.path" />
		</xslt>

		<copy todir="${output.dir}/tmp/OEBPS">
			<fileset dir="OEBPS">
			</fileset>
		</copy>

		<copy todir="${output.dir}/tmp/META-INF">
			<fileset dir="META-INF">
			</fileset>
		</copy>

		<!-- Don't know how to avoid genereation of "${destfilename}.html" by Saxon -->
		<delete file="${output.dir}/tmp/book.html" />

		<echo message="Generating book.epub" level="info" />

		<!-- We create temporary zips so that minetype is the first one in the final zip  -->

		<zip destfile="${output.dir}/temp.mimetype" basedir="${output.dir}/tmp" compress="false" includes="mimetype" />
		<zip destfile="${output.dir}/temp.zip" basedir="${output.dir}/tmp/" level="9" compress="true" excludes="mimetype" includes="OEBPS/** META-INF/**" />
		<zip destfile="${output.dir}/book.epub" update="true" keepcompression="true" encoding="UTF-8" excludes="*.html">
			<zipfileset src="${output.dir}/temp.mimetype" />
			<zipfileset src="${output.dir}/temp.zip" />
		</zip>

		<!-- Have to delete these directories would be nicer to place then in tmp output dir -->
		<delete dir="./OEBPS" />
		<delete dir="./META-INF" />

		<!-- Make sure the epubcheck lib has a subfolder lib with saxon.jar and jing.jar in it
		-->
		<epub.check epub="book" />
		
	</target>

	<!-- epub check macro definition -->
	<macrodef name="epub.check" description="Check an epub">
		<attribute name="epub" description="Name of the EPUB" />
		<sequential>
			<java jar="${epubcheck.jar}" fork="true">
				<arg value="${output.dir}/@{epub}.epub" />
			</java>
		</sequential>
	</macrodef>
</project>